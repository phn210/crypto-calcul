-include .env ../../../.env

# Directories
BASE_NAME = $(shell basename "$(shell pwd)")
BIN_DIR = ../../../$(ROOT_BIN_DIR)/$(BASE_NAME)
INC_DIR = ..
OBJ_PARENT_DIR = ../../../$(ROOT_OBJ_DIR)
OBJ_DIR = $(OBJ_PARENT_DIR)/$(BASE_NAME)
SRC_DIR = .

# Compiler and flags
CC = $(if $(filter debug,$(APP_ENV)), clang, gcc)
CFLAGS += -I$(INC_DIR) $(if $(strip $(DEPS)), \
	$(shell echo $(DEPS) | sed 's/^"//;s/"$$//' | tr ' ' '\n' | awk '{split($$1, a, "/"); print "-I../" a[1]}' | sort -u | xargs), \
) $(if $(filter debug,$(APP_ENV)), $(SAN_CFLAGS),)
LDFLAGS += $(if $(filter debug,$(APP_ENV)), $(SAN_LDFLAGS),)

# Source files
SRCS = $(shell find . -name "*.c")
TEST_SRCS = $(filter %.test.c, $(SRCS))
OBJS = $(SRCS:$(SRC_DIR)/%.c=%.o)
TESTS = $(TEST_SRCS:$(SRC_DIR)/%.c=%)
DEP_PATHS = $(DEPS:%.o=$(OBJ_PARENT_DIR)/%.o)
OBJ_PATHS = $(OBJS:%=$(OBJ_DIR)/%)
TEST_PATHS = $(TESTS:%=$(BIN_DIR)/%)
NON_TEST_OBJ_PATHS = $(filter-out %.test.o, $(OBJ_PATHS))

all: $(TEST_PATHS)

# Create executables for test files
$(BIN_DIR)/%: $(OBJ_PATHS) $(DEP_PATHS) | $(BIN_DIR)
	$(CC) -o $@  $(OBJ_DIR)/$(notdir $@).o $(NON_TEST_OBJ_PATHS) $(DEP_PATHS) $(LDFLAGS)

# Compile dependencies
$(DEP_PATHS):
	@cd ../$(shell basename $(dir $@)) && make $@

# Compile source files to object files
$(OBJ_DIR)/%.o: %.c ../template | $(OBJ_DIR)
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) -c $< -o $@

# Create directories if they don't exist
$(OBJ_DIR):
	@mkdir -p $(OBJ_DIR)

$(BIN_DIR):
	@mkdir -p $(BIN_DIR)

test: $(TEST_PATHS)
	@for test in $(TESTS); do \
		if [ -x $(BIN_DIR)/$$test ]; then \
			$(BIN_DIR)/$$test || exit 1; \
		fi \
	done

clean:
	@rm -rf $(OBJ_DIR)
	@rm -rf $(BIN_DIR)

.PHONY : all clean test
.PRECIOUS: $(OBJ_DIR)/%.o